package com.example.barry215.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.barry215.greendao.UserCache;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_CACHE".
*/
public class UserCacheDao extends AbstractDao<UserCache, String> {

    public static final String TABLENAME = "USER_CACHE";

    /**
     * Properties of entity UserCache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PlayId = new Property(0, String.class, "PlayId", false, "PLAY_ID");
        public final static Property UserId = new Property(1, String.class, "userId", true, "USER_ID");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property UserHead = new Property(4, String.class, "userHead", false, "USER_HEAD");
        public final static Property UserState = new Property(5, String.class, "userState", false, "USER_STATE");
        public final static Property UserInfo = new Property(6, String.class, "userInfo", false, "USER_INFO");
        public final static Property University = new Property(7, String.class, "university", false, "UNIVERSITY");
        public final static Property College = new Property(8, String.class, "college", false, "COLLEGE");
        public final static Property Password = new Property(9, String.class, "password", false, "PASSWORD");
        public final static Property Phone = new Property(10, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(11, String.class, "email", false, "EMAIL");
        public final static Property Alipay = new Property(12, String.class, "alipay", false, "ALIPAY");
    };


    public UserCacheDao(DaoConfig config) {
        super(config);
    }
    
    public UserCacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_CACHE\" (" + //
                "\"PLAY_ID\" TEXT," + // 0: PlayId
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: userId
                "\"SEX\" TEXT," + // 2: sex
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"USER_HEAD\" TEXT," + // 4: userHead
                "\"USER_STATE\" TEXT," + // 5: userState
                "\"USER_INFO\" TEXT," + // 6: userInfo
                "\"UNIVERSITY\" TEXT," + // 7: university
                "\"COLLEGE\" TEXT," + // 8: college
                "\"PASSWORD\" TEXT," + // 9: password
                "\"PHONE\" TEXT," + // 10: phone
                "\"EMAIL\" TEXT," + // 11: email
                "\"ALIPAY\" TEXT);"); // 12: alipay
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_CACHE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserCache entity) {
        stmt.clearBindings();
 
        String PlayId = entity.getPlayId();
        if (PlayId != null) {
            stmt.bindString(1, PlayId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(5, userHead);
        }
 
        String userState = entity.getUserState();
        if (userState != null) {
            stmt.bindString(6, userState);
        }
 
        String userInfo = entity.getUserInfo();
        if (userInfo != null) {
            stmt.bindString(7, userInfo);
        }
 
        String university = entity.getUniversity();
        if (university != null) {
            stmt.bindString(8, university);
        }
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(9, college);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(10, password);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(12, email);
        }
 
        String alipay = entity.getAlipay();
        if (alipay != null) {
            stmt.bindString(13, alipay);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public UserCache readEntity(Cursor cursor, int offset) {
        UserCache entity = new UserCache( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PlayId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userHead
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userState
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userInfo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // university
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // college
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // password
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // email
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // alipay
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserCache entity, int offset) {
        entity.setPlayId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserHead(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserState(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUniversity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCollege(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPassword(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAlipay(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserCache entity, long rowId) {
        return entity.getUserId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserCache entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
