package com.example.barry215.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.barry215.greendao.MessageCache;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_CACHE".
*/
public class MessageCacheDao extends AbstractDao<MessageCache, Long> {

    public static final String TABLENAME = "MESSAGE_CACHE";

    /**
     * Properties of entity MessageCache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SenderId = new Property(1, String.class, "senderId", false, "SENDER_ID");
        public final static Property ReceiverId = new Property(2, String.class, "receiverId", false, "RECEIVER_ID");
        public final static Property MessageBody = new Property(3, String.class, "messageBody", false, "MESSAGE_BODY");
        public final static Property MessageTime = new Property(4, java.util.Date.class, "messageTime", false, "MESSAGE_TIME");
        public final static Property HelpId = new Property(5, Long.class, "helpId", false, "HELP_ID");
        public final static Property IsRead = new Property(6, Boolean.class, "isRead", false, "IS_READ");
    };


    public MessageCacheDao(DaoConfig config) {
        super(config);
    }
    
    public MessageCacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_CACHE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SENDER_ID\" TEXT," + // 1: senderId
                "\"RECEIVER_ID\" TEXT," + // 2: receiverId
                "\"MESSAGE_BODY\" TEXT," + // 3: messageBody
                "\"MESSAGE_TIME\" INTEGER," + // 4: messageTime
                "\"HELP_ID\" INTEGER," + // 5: helpId
                "\"IS_READ\" INTEGER);"); // 6: isRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_CACHE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageCache entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(2, senderId);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(3, receiverId);
        }
 
        String messageBody = entity.getMessageBody();
        if (messageBody != null) {
            stmt.bindString(4, messageBody);
        }
 
        java.util.Date messageTime = entity.getMessageTime();
        if (messageTime != null) {
            stmt.bindLong(5, messageTime.getTime());
        }
 
        Long helpId = entity.getHelpId();
        if (helpId != null) {
            stmt.bindLong(6, helpId);
        }
 
        Boolean isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(7, isRead ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MessageCache readEntity(Cursor cursor, int offset) {
        MessageCache entity = new MessageCache( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // senderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiverId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // messageBody
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // messageTime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // helpId
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isRead
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageCache entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSenderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiverId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessageBody(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessageTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setHelpId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIsRead(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MessageCache entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MessageCache entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
