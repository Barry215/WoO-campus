package com.example.barry215.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.barry215.greendao.HelpInfoCache;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HELP_INFO_CACHE".
*/
public class HelpInfoCacheDao extends AbstractDao<HelpInfoCache, Long> {

    public static final String TABLENAME = "HELP_INFO_CACHE";

    /**
     * Properties of entity HelpInfoCache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property UserSchool = new Property(3, String.class, "userSchool", false, "USER_SCHOOL");
        public final static Property UserSex = new Property(4, String.class, "userSex", false, "USER_SEX");
        public final static Property PublishTime = new Property(5, java.util.Date.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property UserHead = new Property(6, String.class, "userHead", false, "USER_HEAD");
        public final static Property HelpState = new Property(7, String.class, "helpState", false, "HELP_STATE");
        public final static Property DeadTime = new Property(8, String.class, "deadTime", false, "DEAD_TIME");
        public final static Property Reward = new Property(9, String.class, "reward", false, "REWARD");
        public final static Property HelpBody = new Property(10, String.class, "helpBody", false, "HELP_BODY");
        public final static Property HelpType = new Property(11, String.class, "helpType", false, "HELP_TYPE");
        public final static Property HelpTab = new Property(12, String.class, "helpTab", false, "HELP_TAB");
        public final static Property ChooseHelperId = new Property(13, String.class, "chooseHelperId", false, "CHOOSE_HELPER_ID");
        public final static Property SystemHelp = new Property(14, String.class, "systemHelp", false, "SYSTEM_HELP");
        public final static Property FinisherId = new Property(15, String.class, "finisherId", false, "FINISHER_ID");
        public final static Property Rating = new Property(16, Float.class, "rating", false, "RATING");
    };


    public HelpInfoCacheDao(DaoConfig config) {
        super(config);
    }
    
    public HelpInfoCacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HELP_INFO_CACHE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_ID\" TEXT," + // 2: userId
                "\"USER_SCHOOL\" TEXT," + // 3: userSchool
                "\"USER_SEX\" TEXT," + // 4: userSex
                "\"PUBLISH_TIME\" INTEGER," + // 5: publishTime
                "\"USER_HEAD\" TEXT," + // 6: userHead
                "\"HELP_STATE\" TEXT," + // 7: helpState
                "\"DEAD_TIME\" TEXT," + // 8: deadTime
                "\"REWARD\" TEXT," + // 9: reward
                "\"HELP_BODY\" TEXT," + // 10: helpBody
                "\"HELP_TYPE\" TEXT," + // 11: helpType
                "\"HELP_TAB\" TEXT," + // 12: helpTab
                "\"CHOOSE_HELPER_ID\" TEXT," + // 13: chooseHelperId
                "\"SYSTEM_HELP\" TEXT," + // 14: systemHelp
                "\"FINISHER_ID\" TEXT," + // 15: finisherId
                "\"RATING\" REAL);"); // 16: rating
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HELP_INFO_CACHE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HelpInfoCache entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String userSchool = entity.getUserSchool();
        if (userSchool != null) {
            stmt.bindString(4, userSchool);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(5, userSex);
        }
 
        java.util.Date publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindLong(6, publishTime.getTime());
        }
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(7, userHead);
        }
 
        String helpState = entity.getHelpState();
        if (helpState != null) {
            stmt.bindString(8, helpState);
        }
 
        String deadTime = entity.getDeadTime();
        if (deadTime != null) {
            stmt.bindString(9, deadTime);
        }
 
        String reward = entity.getReward();
        if (reward != null) {
            stmt.bindString(10, reward);
        }
 
        String helpBody = entity.getHelpBody();
        if (helpBody != null) {
            stmt.bindString(11, helpBody);
        }
 
        String helpType = entity.getHelpType();
        if (helpType != null) {
            stmt.bindString(12, helpType);
        }
 
        String helpTab = entity.getHelpTab();
        if (helpTab != null) {
            stmt.bindString(13, helpTab);
        }
 
        String chooseHelperId = entity.getChooseHelperId();
        if (chooseHelperId != null) {
            stmt.bindString(14, chooseHelperId);
        }
 
        String systemHelp = entity.getSystemHelp();
        if (systemHelp != null) {
            stmt.bindString(15, systemHelp);
        }
 
        String finisherId = entity.getFinisherId();
        if (finisherId != null) {
            stmt.bindString(16, finisherId);
        }
 
        Float rating = entity.getRating();
        if (rating != null) {
            stmt.bindDouble(17, rating);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HelpInfoCache readEntity(Cursor cursor, int offset) {
        HelpInfoCache entity = new HelpInfoCache( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userSchool
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userSex
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // publishTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userHead
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // helpState
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deadTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // reward
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // helpBody
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // helpType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // helpTab
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // chooseHelperId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // systemHelp
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // finisherId
            cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16) // rating
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HelpInfoCache entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserSchool(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPublishTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUserHead(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHelpState(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeadTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReward(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHelpBody(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHelpType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setHelpTab(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setChooseHelperId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSystemHelp(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFinisherId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRating(cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HelpInfoCache entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HelpInfoCache entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
